project_id="triggering-a-198-8fd39b23" 
gcloud services enable container.googleapis.com


#this one didn't worked
gcloud container clusters create cluster \
    --enable-master-authorized-networks \
    --network network \
    --subnetwork us-central-subnet \
    --cluster-secondary-range-name pods \
    --services-secondary-range-name services \
    --enable-private-nodes \
    --enable-ip-alias \
    --master-ipv4-cidr 172.16.0.0/28 \
    --no-enable-basic-auth \
    --no-issue-client-certificate \
    --service-account=kubernetes@triggering-a-198-8fd39b23.iam.gserviceaccount.com \
    --machine-type=n1-standard-1 \
    --zone=us-central1-a \
    --num-nodes=1 \
    --node-locations="us-central1-a,us-central1-b"

# Authorize a range
gcloud container clusters update cluster \
    --enable-master-authorized-networks \
    --master-authorized-networks 10.4.0.0/20 \
    --zone us-central1-a
    


#authorize cloud shell
dig +short myip.opendns.com @resolver1.opendns.com


gcloud container clusters update cluster \
    --enable-master-authorized-networks \
    --zone us-central1-a
    --master-authorized-networks 10.4.0.0/20,34.138.77.71/32,35.232.244.172


EXISTING_AUTH_NETS: the IP addresses of your existing list of authorized networks.
You can find your authorized networks in the console or by running the following command:


gcloud container clusters describe cluster --format "flattened(masterAuthorizedNetworksConfig.cidrBlocks[])" \
--zone us-central1-a
SHELL_IP: the external IP address of your Cloud Shell.

gcloud container clusters get-credentials cluster \
--zone us-central1-a \
--project triggering-a-198-8fd39b23

kubectl get nodes
----------------------------------------------
this one worked fine

project_id="triggering-a-198-54c59714" 
gcloud services enable container.googleapis.com


gcloud container clusters create cluster --num-nodes 1 \
--network network \
--subnetwork us-central-subnet \
--machine-type=n1-standard-1 \
--zone=us-central1-a \
--num-nodes=1 \
--node-locations="us-central1-a,us-central1-b" \
--service-account=kubernetes@${project_id}.iam.gserviceaccount.com

kubectl get nodes

create sql instance on the console


gcloud sql databases create nextcloud \
--instance=database \
--charset=utf8mb4 \
--collation=utf8mb4_general_ci

gcloud sql users create nextcloud \
--host=0.0.0.0/0 \
--instance=database \
--password=password


gcloud builds submit --tag gcr.io/${project_id}/nextcloud:21.0.1-apache .

access key:
GOOG1EMMNYFRZ63PLKIGLCRA7XIFF3BUJMH3SWIBWDZ2OWSERJ2P6VYVJUCEI
Secret
RKjdvRXwEp7p/Mikyukbyt/ko5kpNJu3oebybvwn




kubectl create secret generic nextcloud-mysql --from-literal=username=nextcloud --from-literal=password=password
kubectl create secret generic nextcloud-admin --from-literal=username=admin --from-literal=password=admin123



==============================correct way to fill out the file==============================
image:
  repository: gcr.io/triggering-a-198-54c59714/nextcloud
  tag: 21.0.1-apache

ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: nginx

nextcloud:
  host: nextcloud.kube.home
  existingSecret:
    secretName: nextcloud-admin
    usernameKey: username
    passwordKey: password
  configs:
    gcs.config.php: |-
      <?php
      $CONFIG = array(
        'objectstore' => array(
          'class' => '\\OC\\Files\\ObjectStore\\S3',
          'arguments' => array(
            'bucket'         => 'triggering-a-198-54c59714',  ##bucket goes here
            'autocreate'     => false,
            'key'            => 'GOOG1EMMNYFRZ63PLKIGLCRA7XIFF3BUJMH3SWIBWDZ2OWSERJ2P6VYVJUCEI',
            'secret'         => 'RKjdvRXwEp7p/Mikyukbyt/ko5kpNJu3oebybvwn',
            'hostname'       => 'storage.googleapis.com',
            'region'         => 'auto',
            'use_ssl'        => true,
            'use_path_style' => false,
          )
        )
      );
    memorystore.config.php: |-
      <?php
      $CONFIG = array(
        'memcache.local' => '\OC\Memcache\Redis',
        'redis' => array(
          'host' => '10.140.38.99',   #internal ip of redis
          'port' => 6379,
        ),
      );

internalDatabase:
  enabled: false

externalDatabase:
  enabled: true
  type: mysql
  host: 35.232.106.182            ##External ip of cloud sql here
  database: nextcloud
  existingSecret:
    secretName: nextcloud-mysql
    usernameKey: username
    passwordKey: password

service:
  type: NodePort
  nodePort: 30000

persistence:
  enabled: true


